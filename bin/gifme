#!/usr/bin/env ruby

trap('SIGINT') do
  error 'Stopping'
end

def info(message)
  io = $stdout.tty? ? $stdout : $stderr
  io.puts message
end

def error(message)
  $stderr.puts message
  exit 1
end

require 'optparse'

options = { output:  'out.gif',
            delay:   20,
            reverse: false }

parser = OptionParser.new do |opts|
  opts.banner = "Usage: gifme [options] FILES"

  opts.separator ""
  opts.separator "Options:"

  opts.on('-d N', '--delay=N', Integer,
          'Set the delay between frames (default: 20)') do |delay|
    options[:delay] = delay
  end

  opts.on('--output=FILE',
          'Path of the generated gif (default: out.gif)') do |output|
    options[:output] = output
  end

  opts.on('--[no-]reverse',
          'Reverse frames to make gif loopable') do |reverse|
    options[:reverse] = reverse
  end

  opts.on_tail('-h', '--help',
               'Show this message') do
    info opts
    exit
  end

  opts.on_tail('--version',
               'Show version') do
    info '0.0.1'
    exit
  end
end

parser.parse! ARGV
error 'No images to gif!' if ARGV.empty?

delay   = options[:delay]
reverse = options[:reverse]
output  = options[:output]
command = %W(convert -delay #{delay}
                     -loop 0
                     -layers OptimizeTransparency)
command += ARGV
command += ARGV.reverse[1..-2] if reverse
command << output

require 'open3'
stdout, stderr, status = Open3.capture3(*command)
if status.success?
  info "Success! Your handsome gif is living at #{File.expand_path(output)}."
  $stdout.puts File.expand_path(output) unless $stdout.tty?
else
  message = "Something went horribly wrong. :("
  unless stderr.empty?
    message += "\n\nMessage from ImageMagick:\n"
    message += stderr.split("\n").map {|line| '  ' + line }.join("\n")
  end
  error message
end
